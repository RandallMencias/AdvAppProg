Index: src/main/java/com/example/proyecto_2/MultiFactorial.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/proyecto_2/MultiFactorial.java b/src/main/java/com/example/proyecto_2/MultiFactorial.java
deleted file mode 100644
--- a/src/main/java/com/example/proyecto_2/MultiFactorial.java	
+++ /dev/null	
@@ -1,69 +0,0 @@
-package com.example.proyecto_2;
-
-import javafx.concurrent.Task;
-
-import java.math.BigInteger;
-
-public class MultiFactorial extends Task<BigInteger> {
-    private static int n; // Factorial number to calculate
-    private static int numThreads; // Number of threads to test
-    private static int[] results;
-
-    // constructor
-    public MultiFactorial(int n, int numThreads) {
-        this.n = n;
-        this.numThreads = numThreads;
-    }
-
-    // long-running code to be run in a worker thread
-    @Override
-    protected BigInteger call() {
-        updateMessage("Calculating...");
-        BigInteger result = factorial();
-        System.out.println("Que paso aca");
-        updateMessage("Done calculating.");
-        return result;
-    }
-
-    private static int[] numtask(){
-        int[] tasks = new int[numThreads+1];
-        int q = n / numThreads;
-        int r = n % numThreads;
-
-        for (int i =0; i < numThreads; i++) {
-            tasks[i] = i * q;
-            if (i < r) {
-                tasks[i] += i;
-            } else {
-                tasks[i] += r;
-            }
-        }
-        tasks[numThreads] = n;
-        tasks[0] = 0;
-        
-        return tasks;
-    }
-
-
-
-    private static BigInteger multiply1(int start, int end){
-        BigInteger f = new BigInteger("1");
-        for (int i = start; i <= end; i++){
-            f = f.multiply(BigInteger.valueOf(i));}
-//            System.out.println(f+" start: "+start+" end: "+end+" i: "+i);}
-        return f;
-    }
-
-    public static BigInteger factorial()
-    {
-        BigInteger f = new BigInteger("1");
-        int []numtask = numtask();
-        for(int i = 0; i < numtask.length-1; i++){
-              f = f.multiply(multiply1(numtask[i]+1, numtask[i+1]));
-        }
-        return f;
-    }
-
-
-
-}
Index: ../.idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CompilerConfiguration\">\r\n    <annotationProcessing>\r\n      <profile name=\"Maven default annotation processors profile\" enabled=\"true\">\r\n        <sourceOutputDir name=\"target/generated-sources/annotations\" />\r\n        <sourceTestOutputDir name=\"target/generated-test-sources/test-annotations\" />\r\n        <outputRelativeToContentRoot value=\"true\" />\r\n      </profile>\r\n    </annotationProcessing>\r\n    <bytecodeTargetLevel>\r\n      <module name=\"demo\" target=\"19\" />\r\n      <module name=\"Proyecto_2\" target=\"19\" />\r\n    </bytecodeTargetLevel>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/compiler.xml b/../.idea/compiler.xml
--- a/../.idea/compiler.xml	
+++ b/../.idea/compiler.xml	
@@ -6,6 +6,7 @@
         <sourceOutputDir name="target/generated-sources/annotations" />
         <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
         <outputRelativeToContentRoot value="true" />
+        <module name="Proyecto_2" />
       </profile>
     </annotationProcessing>
     <bytecodeTargetLevel>
